package day0323;

// 상속
//  - 우리 클래스를 다른 클래스의 자식 클래스로 등록시켜서
//    프로그래밍에 유용하게 우리가 쓰는 방법이다.

//  - 1) 클래스 상속
//      : 다른 클래스를 상속을 해서 그 클래스에 있는 메소드를 상속받는 클래스가 
//        다시 적어주지 않아도!! 사용가능하게 만들어 주는 것.
//      : 즉, 코드의 재사용성을 높이기 위한 방법이다.

//  - 2) 인터페이스 상속
//      : 인터페이스를 상속해서 그 인터페이스에 선언되어 있는 메소드들을 상속받는 클래스가
//        반드시 구현해서 일종의 규범을 만드는 것.
//      : 인터페이스 상속을 하는 이유는, 다형성 polymorphism을 위해서,,다,,,

// * 메소드 오버라이드(override)
//  - 자식 클래스가 상속 받은 클래스 혹은 인터페이스의 메소드를 재정의 하는 것을 메소드 오버라이드 라고 한다.
//  - 다만, 상속하는 부모가 클래스인지 인터페이스인지에 따라 오버라이드가 권장사항인지 필수사항인지가 달라진다.
//  - 만약, 부모가 클래스라면 오버라이드는 안 해도 상관 없다.
//    부모 클래스에 적혀있는 메소드가 자식 클래스가 그대로 써도 상관이 없는 경우, 오버라이드를 안 해줘도 된다.
//  - 만약, 부모가 인터페이스라면 오버라이드는 반드시 해야한다.
//    왜냐면, 인터페이스 내부에는 해당 메소드의 내용이 전혀 없기 때문이다.

// 클래스 상속을 하는 방법 :
//  클래스를 만들면서 클래스 이름 옆에 "extends 부모 클래스 이름"을 적어주면 된다.

// 인터페이스 상속을 하는 방법 :
//  클래스를 만들면서 이름 옆에 "implements 부모 인터페이스 이름"을 적어주면 된다.

// 다중상속
//  - 여러 클래스를 상속받는 경우를 다중 상속이라고 한다.
//  - 몇몇 언어들은 다중 클래스 상속을 지원하나,
//     자바의 경우 다중 클래스 상속은 허용되지 않는다.
//  - 단, 부모클래스가 다른 부모클래스가 있는 경우, 즉 상속의 상속은 다중상속 이라고 하지 않는다.
public class Ex01Inheritance {
    public static void main(String[] args) {
        
        // Hyena 객체를 만들어보자
        Hyena hyena = new Hyena();

        System.out.println("hyena");
        
        hyena.makeGroup();
        hyena.nasty();
        hyena.eat();
        System.out.println("--------------------------");
        
        // Wolf 객체를 만들어보자
        Wolf wolf = new Wolf();

        System.out.println("wolf");
        
        wolf.makeGroup();
        wolf.showHandsom();
        wolf.eat();
        System.out.println("--------------------------");
        
        // Dog 객체를 만들어보자
        Dog dog = new Dog();
        
        System.out.println("dog");

        dog.makeGroup();
        dog.showHandsom();
        dog.eat(); // 여기서 개가 무리사냥을 한다? 어울리지 않기에 오버라이드 하러간다
        dog.domestic();
        dog.loyal();
        System.out.println("--------------------------");
    
    
    
    }
  
}
