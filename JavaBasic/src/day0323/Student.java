package day0323;

// 인터페이스
//  - 일종의 추상 클래스 라고 볼 수 있지만 추상 클래스와는 다르게,
//    내부의 메소드에 선언 말고는 아무것도 존재하지 않는다 라는 특징이 있다.
//  - 심지어 인터페이는 내부에 필드도 존재하지 않고 
//    오직 final 혹은 static이 붙는 상수만 만들어줄 수 있다.

// 객체는 클래스의 변수, 인터페이스에는 필드도 없어요
public interface Student {
    public void study();
    public void goSchool();
    public void eat();
    public void test();
    // 인터페이스의 내부는 이렇게만 작성이 된다.
    // 그렇다면 메소드의 구현은?
    // 이 Student 인터페이스를 상속받는 클래스가 반드시 해주기만 하면 된다.
}

// 인터페이스를 사용하는 이유 :
// 만약 다른 클래스의 메소드가 파라미터 혹은 리턴 타입에 인터페이스를 적어주게 되면
//  그 인터페이스를 상속 받는 모든 클래스가 그 자리를 대체 가능하기 때문이다.
// 즉 한가지만 적더라도 "야러가지 모양" 으로 변화 가능하게 된다. -> polymorphism